/**
 * struct.c: This file was adapted from syrk/PolyBench/GPU 1.0 test
 * suite to run on GPU with OpenMP 4.0 pragmas and OpenCL driver.
 *
 * http://www.cse.ohio-state.edu/~pouchet/software/polybench/GPU 
 *
 * Contacts: Marcio M Pereira <mpereira@ic.unicamp.br>
 *           Rafael Cardoso F Sousa <rafael.cardoso@students.ic.unicamp.br>
 *           Lu√≠s Felipe Mattos <ra107822@students.ic.unicamp.br> 
*/

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <assert.h>
#include <unistd.h>
#include <sys/time.h>
//#include "../../common/polybenchUtilFuncts.h"

//define the error threshold for the results "not matching"
#define ERROR_THRESHOLD 0.05
#define GPU_DEVICE 1

/* Problem size */
#define N 1024
#define M 1024

/* Declared constant values for alpha and beta */
/* (same as values in PolyBench 2.0) */
#define alpha 12435
#define beta 4546

struct point {
  float x;
  float y;
};

typedef struct point DATA_TYPE;

void init_arrays(DATA_TYPE* A, DATA_TYPE* C, DATA_TYPE* C_GPU) {
  int i, j;
	
  for (i = 0; i < N; i++) {
    for (j = 0; j < M; j++) {
      A[i*M + j].x = ((float) i*j) / N;
      A[i*M + j].y = ((float) i*j) / N;
    }
    for (j = 0; j < M; j++) {
      C[i*M + j].x = ((float) i*j + 2) / N;
      C_GPU[i*M + j].y = ((float) i*j + 2) / N;
    }
  }
}

void compareResults(DATA_TYPE* C, DATA_TYPE* C_GPU) {
  int i,j,fail;
  fail = 0;

  // Compare C with C_GPU
  for (i=0; i<N; i++)
    for (j=0; j<M; j++) {
      if (percentDiff(C[i*M + j].x, C_GPU[i*M + j].x) > ERROR_THRESHOLD) {
	fail++;
      }
      if (percentDiff(C[i*M + j].y, C_GPU[i*M + j].y) > ERROR_THRESHOLD) {
	fail++;
      }
    }
	
  // print results
  printf("Non-Matching CPU-GPU Outputs Beyond Error Threshold of %4.2f Percent: %d\n", ERROR_THRESHOLD, fail);
}

void syrk(DATA_TYPE* A, DATA_TYPE* C) {
  int i, j, k;
	
  for (i = 0; i < N; i++) {
    for (j = 0; j < M; j++) {
      C[i*M + j].x *= beta;
      C[i*M + j].y *= beta;
    }
  }
	
  for (i = 0; i < N; i++) {
    for (j = 0; j < M; j++) {
      for (k = 0; k < M; k++) {
	C[i*N + j].x += alpha * A[i*M + k].x * A[j*M + k].x;
	C[i*N + j].y += alpha * A[i*M + k].y * A[j*M + k].y;
      }
    }
  }
}

void syrkGPU(DATA_TYPE* A, DATA_TYPE* C_GPU) {
  int i, j;
  double t_start, t_end;

  t_start = rtclock();

  #pragma omp target device(GPU_DEVICE)
  #pragma omp target map(to: A[:N*M]) map(tofrom: C_GPU[:N*M])
  {
    #pragma omp parallel for
    for (i = 0; i < N; i++) {
      for (j = 0; j < M; j++) {
	C_GPU[i * M + j].x *= beta;
	C_GPU[i * M + j].y *= beta;
      }
    }
  
    #pragma omp parallel for collapse(2)
    for (i = 0; i < N; i++) {
      for (j = 0; j < M; j++) {
	int k;		
	for(k=0; k< M; k++) {
	  C_GPU[i * M + j].x += alpha * A[i * M + k].x * A[j * M + k].x;
	  C_GPU[i * M + j].y += alpha * A[i * M + k].y * A[j * M + k].y;
	}
      }
    }
  }
  
  t_end = rtclock();
  fprintf(stdout, "GPU Runtime: %0.6lfs\n", t_end - t_start);

}

int main() {
  double t_start, t_end;

  DATA_TYPE* A;
  DATA_TYPE* C;
  DATA_TYPE* C_GPU;

  int i,j;

  A = (DATA_TYPE*)malloc(N*M*sizeof(DATA_TYPE));
  C = (DATA_TYPE*)malloc(N*M*sizeof(DATA_TYPE));
  C_GPU = (DATA_TYPE*)malloc(N*M*sizeof(DATA_TYPE));
  
  fprintf(stdout, "<< Symmetric rank-k struct {x,y} operations >>\n");

  init_arrays(A, C, C_GPU);
  syrkGPU(A, C_GPU);
  
  t_start = rtclock();
  syrk(A, C);
  t_end = rtclock();
  fprintf(stdout, "CPU Runtime: %0.6lfs\n", t_end - t_start);

  compareResults(C, C_GPU);
  free(A);
  free(C);
  free(C_GPU);

  return 0;
}

